type token =
  | NON_TERMINAL of (string)
  | TERMINAL of (string)
  | EOF
  | OR
  | ASSIGN
  | NEWLINE
  | LBRACE
  | RBRACE

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 
  
# 17 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  259 (* OR *);
  260 (* ASSIGN *);
  261 (* NEWLINE *);
  262 (* LBRACE *);
  263 (* RBRACE *);
    0|]

let yytransl_block = [|
  257 (* NON_TERMINAL *);
  258 (* TERMINAL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\004\000\005\000\005\000\
\006\000\006\000\007\000\007\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\003\000\001\000\003\000\001\000\
\002\000\001\000\001\000\003\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\002\000\004\000\015\000\000\000\000\000\
\000\000\001\000\003\000\013\000\014\000\000\000\005\000\006\000\
\000\000\000\000\011\000\000\000\000\000\009\000\012\000\007\000"

let yydgoto = "\002\000\
\006\000\007\000\008\000\015\000\016\000\017\000\018\000\019\000"

let yysindex = "\255\255\
\001\000\000\000\000\255\000\000\000\000\000\000\001\000\007\255\
\001\255\000\000\000\000\000\000\000\000\001\255\000\000\000\000\
\002\255\001\255\000\000\006\255\001\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\255\003\255\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\007\000\000\000\000\000\002\000\250\255\003\000\000\000\000\000"

let yytablesize = 262
let yytable = "\001\000\
\004\000\012\000\013\000\009\000\021\000\010\000\014\000\010\000\
\008\000\010\000\008\000\011\000\023\000\010\000\024\000\020\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\005\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\004\001\003\001\003\001\006\001\005\001\
\005\001\007\001\007\001\005\001\007\001\007\000\021\000\014\000\
\255\255\255\255\255\255\255\255\018\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\005\001"

let yynames_const = "\
  EOF\000\
  OR\000\
  ASSIGN\000\
  NEWLINE\000\
  LBRACE\000\
  RBRACE\000\
  "

let yynames_block = "\
  NON_TERMINAL\000\
  TERMINAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'line) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.syntax) in
    Obj.repr(
# 17 "parser.mly"
              ( _1::_2 )
# 154 "parser.ml"
               : Types.syntax))
; (fun __caml_parser_env ->
    Obj.repr(
# 18 "parser.mly"
        ( [] )
# 160 "parser.ml"
               : Types.syntax))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assignment) in
    Obj.repr(
# 21 "parser.mly"
                     ( Some(_1) )
# 167 "parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "parser.mly"
            ( None )
# 173 "parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 26 "parser.mly"
                           ( { lhs = _1; rhs = _3 } )
# 181 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 30 "parser.mly"
          ( _1 )
# 188 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sequential_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 34 "parser.mly"
                             ( Types.OR_EXPR(_1, _3) )
# 196 "parser.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sequential_expr) in
    Obj.repr(
# 35 "parser.mly"
                    ( Types.OR_EXPR_BASE(_1) )
# 203 "parser.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primary_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sequential_expr) in
    Obj.repr(
# 38 "parser.mly"
                               ( Types.SEQUENTIAL_EXPR(_1, _2) )
# 211 "parser.ml"
               : 'sequential_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expr) in
    Obj.repr(
# 39 "parser.mly"
                 ( Types.SEQUENTIAL_EXPR_BASE(_1) )
# 218 "parser.ml"
               : 'sequential_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 43 "parser.mly"
       ( Types.PRIMARY_EXPR(_1) )
# 225 "parser.ml"
               : 'primary_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                       ( Types.PRIMARY_PARENTHESIZED_EXPR(_2) )
# 232 "parser.ml"
               : 'primary_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "parser.mly"
               ( Types.NonTerminal(_1) )
# 239 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
            ( Types.Terminal(_1) )
# 246 "parser.ml"
               : 'term))
(* Entry syntax *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let syntax (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.syntax)
